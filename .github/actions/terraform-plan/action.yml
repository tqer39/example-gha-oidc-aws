---
name: Terraform Plan

description: Terraform Plan

inputs:
  github-token:
    description: "github token"
    required: true
  AWS_GITHUB_ACTIONS_OIDC_ROLE:
    description: "AWS OIDC IAM Role"
    required: true
  working-directory:
    description: "Terraform CLI 実行時のパス"
    required: true

runs:
  using: composite
  steps:
    - uses: './.github/actions/setup-terraform'
      with:
        working-directory: ${{ inputs.working-directory }}
        AWS_GITHUB_ACTIONS_OIDC_ROLE: ${{ inputs.AWS_GITHUB_ACTIONS_OIDC_ROLE }}

    - uses: './.github/actions/terraform-validate'
      with:
        working-directory: ${{ inputs.working-directory }}

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      working-directory: ${{ inputs.working-directory }}
      shell: bash

    # - name: Terraform Plan (failure) -> GitHub Script
    #   uses: actions/github-script@v6
    #   # if: steps.plan.outcome == 'failure'
    #   env:
    #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
    #   with:
    #     github-token: ${{ inputs.github-token }}
    #     script: |
    #       const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
    #       #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
    #       #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
    #       #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
    #       <details><summary>Show Plan</summary>
    #       \`\`\`\n
    #       ${process.env.PLAN}
    #       \`\`\`
    #       </details>
    #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
    #       github.rest.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: output
    #       })

    - name: Sticky Pull Request Comment
      id: sticky-pull-request-comment
      uses: marocchino/sticky-pull-request-comment@v2.2.0
      # if: github.event_name == 'pull_request' && steps.changed.outputs.changed == 'true'
      with:
        # GITHUB_TOKEN: ${{ inputs.github-token }}
        hide_and_recreate: true
        header: plan
        message: |
          #### Terraform Format and Style `${{ steps.fmt.outcome }}`
          #### Terraform Initialization ⚙️`${{ steps.init.outcome }}`
          #### Terraform Validation 🤖`${{ steps.validate.outcome }}`
          #### Terraform Plan 📖`${{ steps.plan.outcome }}`
          <details><summary>Show Plan</summary>

          ```hcl

          terraform
          ${{ steps.plan.outputs.stdout }}

          ```

          </details>

    - name: Terraform Plan (failure) -> Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
      shell: bash
