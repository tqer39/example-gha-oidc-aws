---
name: terraform fmt

description: "Terraform のフォーマット"

inputs:
  AWS_ACCOUNT_ID:
    description: "AWS Account ID"
    required: true

runs:
  using: "composite"
  steps:
    - name: Configure AWS credentials
      id: configure-aws-credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ap-northeast-1
        role-to-assume: arn:aws:iam::${{ inputs.AWS_ACCOUNT_ID }}:role/oidc-github-actions

    - name: Get caller identity
      id: get-caller-identity
      run: aws sts get-caller-identity
      shell: bash

    - name: Get current Terraform version
      id: get-terraform-version
      run: echo "TERRAFORM_VERSION=$(cat .terraform-version)" >> $GITHUB_ENV
      shell: bash

    - name: Setup Terraform
      id: setup-terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Format
      id: fmt
      working-directory: "main"
      run: terraform fmt -check -recursive -diff
      shell: bash

    - name: Terraform Init
      id: init
      working-directory: "main"
      run: terraform init -reconfigure
      shell: bash

    - name: Terraform Validate
      id: validate
      working-directory: "main"
      run: terraform validate -no-color
      shell: bash

    - name: Terraform Plan
      id: plan
      working-directory: "main"
      shell: bash
      run: terraform plan -no-color

    - name: Terraform Plan (failure) -> GitHub Script
      uses: actions/github-script@v6
      if: steps.plan.outcome == 'failure'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
          #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
          #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan (failure) -> Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
      shell: bash
