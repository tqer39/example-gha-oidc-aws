---
name: Terraform Plan

description: Terraform Plan

inputs:
  github-token:
    description: "github token"
    required: true
  AWS_ACCOUNT_ID:
    description: "AWS Account ID"
    required: true
  AWS_GITHUB_ACTIONS_OIDC_ROLE:
    description: "AWS OIDC IAM Role a"
    required: true
  working-directory:
    description: "Terraform CLI 実行時のパス"
    required: true

runs:
  using: composite
  steps:
    - uses: './.github/actions/setup-terraform'
      with:
        working-directory: ${{ inputs.working-directory }}
        AWS_ACCOUNT_ID: ${{ inputs.AWS_ACCOUNT_ID }}
        AWS_GITHUB_ACTIONS_OIDC_ROLE: arn:aws:iam::${{ inputs.AWS_ACCOUNT_ID }}:role/oidc-github-actions

    - uses: './.github/actions/terraform-validate'
      with:
        working-directory: ${{ inputs.working-directory }}

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      working-directory: ${{ inputs.working-directory }}
      shell: bash

    - name: Terraform Plan (failure) -> GitHub Script
      uses: actions/github-script@v6
      # if: steps.plan.outcome == 'failure'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
          #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
          #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # - uses: marocchino/sticky-pull-request-comment@v2
    #   if: github.event_name == 'pull_request' && steps.changed.outputs.changed == 'true'
    #   with:
    #     header: plan
    #     message: |
    #       #### Terraform Format and Style `${{ steps.fmt.outcome }}`
    #       #### Terraform Initialization ⚙️`${{ steps.init.outcome }}`
    #       #### Terraform Validation 🤖`${{ steps.validate.outcome }}`
    #       #### Terraform Plan 📖`${{ steps.plan.outcome }}`
    #       <details><summary>Show Plan</summary>
    #       ```
    #       terraform
    #       ${{ steps.plan.outputs.stdout }}
    #       ```
    #       </details>

    - name: Terraform Plan (failure) -> Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
      shell: bash
