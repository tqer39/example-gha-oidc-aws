---
name: Branch (main)

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: "Terraform"
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/oidc-github-actions
          aws-region: ap-northeast-1
          role-session-name: MySessionName

      - name: Get caller identity
        id: get-caller-identity
        run: aws sts get-caller-identity
        shell: bash

      - name: Get current Terraform version
        id: get-terraform-version
        run: echo "TERRAFORM_VERSION=$(cat .terraform-version)" >> $GITHUB_ENV

      - name: Setup Terraform
        id: setup-terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format
        id: fmt
        working-directory: "main"
        run: terraform fmt -recursive -check

      - name: Terraform Init
        id: init
        working-directory: "main"
        run: terraform init

      - name: Terraform Validate
        id: validate
        working-directory: "main"
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: "main"
        shell: bash
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: "main"
        run: terraform apply -auto-approve
